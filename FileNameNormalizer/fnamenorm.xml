<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>fnamenorm</name>
  </assembly>
  <members>
    <member name="N:FileNameNormalizer">
      <summary>
FileNameNormalizer</summary>
    </member>
    <member name="T:FileNameNormalizer.FileOp">
      <summary>
A class for file operations. All operations are able to handle extended length paths.</summary>
      <remarks>
Uses Pri.LongPath library by Peter Richman</remarks>
    </member>
    <member name="F:FileNameNormalizer.FileOp.MAX_DIR_PATH_LENGTH">
    </member>
    <member name="F:FileNameNormalizer.FileOp.MAX_FILE_PATH_LENGTH">
    </member>
    <member name="M:FileNameNormalizer.FileOp.GetFiles(System.String,System.String)">
      <summary>
Get Files Array (path strings)</summary>
      <param name="path">
</param>
      <param name="pattern">
</param>
    </member>
    <member name="M:FileNameNormalizer.FileOp.GetSubDirectories(System.String)">
      <summary>
Get SubDirectory Array</summary>
      <param name="directoryItem">
</param>
    </member>
    <member name="M:FileNameNormalizer.FileOp.Rename(System.String,System.String)">
      <summary>
Rename File or Directory</summary>
      <param name="path">
</param>
      <param name="newPath">
</param>
    </member>
    <member name="M:FileNameNormalizer.FileOp.FileOrDirectoryExists(System.String)">
      <summary>
Check if given path exists</summary>
      <returns>
Returns true if path exists</returns>
      <param name="name">
The path to be examined</param>
    </member>
    <member name="M:FileNameNormalizer.FileOp.DirectoryExists(System.String)">
      <summary>
Test if a directory exists</summary>
      <param name="path">
</param>
    </member>
    <member name="M:FileNameNormalizer.FileOp.FileExists(System.String)">
      <summary>
Test if a file exists</summary>
      <param name="path">
</param>
    </member>
    <member name="M:FileNameNormalizer.FileOp.GetAllFilesAndDirectories(System.String)">
      <summary>
Enumerates all files and directories. Not currently in use. Code from C# Cook Book Modified to use Pri.LongPath library</summary>
      <param name="dir">
</param>
    </member>
    <member name="M:FileNameNormalizer.FileOp.DisplayAllFilesAndDirectories(System.String)">
      <summary>
Testing. Just displays all file items</summary>
      <param name="dir">
</param>
    </member>
    <member name="M:FileNameNormalizer.FileOp.IsSymbolicFile(System.String)">
      <summary>
Test if path is a symbolic link</summary>
      <param name="path">
</param>
    </member>
    <member name="M:FileNameNormalizer.FileOp.IsSymbolicDir(System.String)">
      <summary>
Test if path is a symbolic link</summary>
      <param name="path">
</param>
    </member>
    <member name="M:FileNameNormalizer.FileOp.ExtractLastComponent(System.String)">
      <summary>
Get the path without the last component</summary>
      <param name="path">
</param>
    </member>
    <member name="T:FileNameNormalizer.Program">
      <summary>
A class for running programs as command line application</summary>
    </member>
    <member name="F:FileNameNormalizer.Program._optionRecurse">
    </member>
    <member name="F:FileNameNormalizer.Program._optionRename">
    </member>
    <member name="F:FileNameNormalizer.Program._optionShowEveryFile">
    </member>
    <member name="F:FileNameNormalizer.Program._optionPrintErrorsOnly">
    </member>
    <member name="F:FileNameNormalizer.Program._optionSearchPattern">
    </member>
    <member name="F:FileNameNormalizer.Program._optionHexDump">
    </member>
    <member name="F:FileNameNormalizer.Program._defaultNormalizationForm">
    </member>
    <member name="F:FileNameNormalizer.Program._optionNormalizationForm">
    </member>
    <member name="F:FileNameNormalizer.Program.acceptableCharacters">
    </member>
    <member name="F:FileNameNormalizer.Program.replacementCharacter">
    </member>
    <member name="M:FileNameNormalizer.Program.Main(System.String[])">
      <summary>
Reads options and paths from command line arguments, and process all accessible paths</summary>
      <param name="args">
</param>
    </member>
    <member name="M:FileNameNormalizer.Program.HandleDirectory(System.String)">
      <summary>
Read directory contents, process files/directories and optionally recurse subdirectories</summary>
      <param name="directoryItem">
Path to the directory to be processed</param>
    </member>
    <member name="M:FileNameNormalizer.Program.NormalizeIfNeeded(System.String,System.Boolean,System.Text.NormalizationForm)">
      <summary>
Check if file or directory name needs normalization, and normalize if normalize option is set</summary>
      <returns>
Return true if normalization is needed</returns>
      <param name="path">
Path to be examined</param>
      <param name="isDir">
Boolean flag that tells us wheter the path is a directory or a file</param>
      <param name="form">
Form C (default), Form D</param>
    </member>
    <member name="M:FileNameNormalizer.Program.NormalizeIfNeeded(System.String,System.Boolean)">
      <summary>
Check if file or directory name needs normalization, and normalize if normalize option is set</summary>
      <returns>
Return true if normalization is needed</returns>
      <param name="path">
Path to be examined</param>
      <param name="isDir">
Boolean flag that tells us wheter the path is a directory or a file</param>
    </member>
    <member name="M:FileNameNormalizer.Program.ParseArguments(System.String[])">
      <summary>
Parses command line arguments Sets options and reads accessible paths from argument array.</summary>
      <returns>
Array of accessible paths</returns>
      <param name="args">
Argument array as it is provided to Main</param>
    </member>
    <member name="M:FileNameNormalizer.Program.printHexFileName(System.String)">
      <summary>
Print Name in Hexadecimal. For Debuging.</summary>
      <param name="fname">
</param>
    </member>
  </members>
</doc>
